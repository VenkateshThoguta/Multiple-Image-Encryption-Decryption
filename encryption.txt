from __future__ import annotations
import hashlib
import math
from PIL import Image
import numpy as np
def get_matrix(im, plane):  
#   Function Purpose:
# The get_matrix function aims to extract a 2D matrix (representing an image) from a 3D numpy array. 
# The 3D array likely represents an RGB image with color planes.

# Function Details:
# Input Parameters:

# im: The input image represented as a 3D numpy array.
# plane: The color plane (0 for red, 1 for green, 2 for blue) to extract.
# Initialization:

# image: An empty list to store rows of the 2D matrix.
# Nested Loop:

# The function uses nested loops to iterate over the width and height of the image.
# Pixel Extraction:

# For each pixel in the image, it attempts to extract the pixel value from the specified color plane (plane) using 
# im.item(i, j, plane). This assumes that the image is represented as a 3D array, where i and j represent 
# the pixel's position, and plane specifies the color channel.

# The try block attempts to append the pixel value to the current row. If the row doesn't exist, it creates a
# new row with the pixel value. This process ensures that each row of the matrix contains pixel values from the 
# specified color plane.

# Row Addition:

# The inner loop completes a row, and the outer loop attempts to append the row to the image list. 
# If the list doesn't exist, it creates a new list with the current row. This process builds the 2D matrix 
# row by row.
# Result:

# The function returns the 2D matrix (image), where each element represents the pixel value 
# from the specified color plane.
# Usage:
# The function is likely used to separate the color channels of an image into individual 2D matrices. 
# In the context of the larger image processing or encryption script, these individual color channel matrices 
# may be further processed or manipulated. 
  image = []
  width = im.shape[0]
  height = im.shape[1]
  for i in range(width):
    row = []
    for j in range(height):
      try:
        row.append(im.item(i, j, plane))
      except:
        row = [im.item(i, j, plane)]
    try:
      image.append(row)
    except:
      image = [row]
  return image
def assign_matrix_image(img, mat2, mat1, mat):
#   img: This is the pixel access object representing the image, allowing direct access to individual pixels.

# mat2, mat1, mat: These are matrices representing color channels. Each matrix likely corresponds to one of the
# color channels (e.g., Red, Green, Blue).

# The function iterates over the pixels of the image using nested loops (for i in range(len(mat)) and for j in range(len(mat[i]))).
# For each pixel at coordinates (i, j), it tries to assign a tuple of RGB values to that pixel using the values 
# from the corresponding positions in mat, mat1, and mat2. The values are obtained 
# by taking the modulo 256 to ensure they are within the valid range of RGB values.

# In case an exception occurs (which is not specified in the provided code), the same assignment is attempted again. 
# This could be useful for handling potential errors or ensuring that the assignment is retried if an issue occurs 
# during the process.
    for i in range(len(mat)):
        for j in range(len(mat[i])):
            try:
                img[j, i] = (int(mat[i][j]) % 256, int(mat1[i][j]) % 256, int(mat2[i][j]) % 256)
            except:
                img[j, i] = (int(mat[i][j]) % 256, int(mat1[i][j]) % 256, int(mat2[i][j]) % 256)
    return img
def toDecimal(binary):
    decimal = 0
    for bit in binary:
        decimal = decimal * 2 + bit
    return decimal
def toBinary(n):
#   Function Parameter:

# n: The integer value that needs to be converted into binary.
# Initialization:

# counter = 8: The variable counter is initialized to 8, representing the number of bits in the binary representation.

# bitseq = []: An empty list bitseq is initialized to store the binary bits.

# Binary Conversion Loop:

# The function enters a loop that continues until the counter reaches 0.

# In each iteration:

# q = n / 2: Calculates the quotient when n is divided by 2.

# r = n % 2: Calculates the remainder when n is divided by 2.

# The remainder (r) is appended to the bitseq list.

# n = q: Updates n to be the quotient for the next iteration.

# counter = counter - 1: Decrements the counter.

# The loop continues until the counter becomes zero.

# Bit Sequence Reversal:

# After the loop, the function attempts to reverse the order of bits in the bitseq list using bitseq.reverse().

# If an exception occurs during the reversal (e.g., if bitseq is empty), it catches the exception and sets bitseq to an empty list.

# Return:

# The function returns the final list bitseq, which represents the binary representation of the input integer.
  counter=8
  bitseq=[]
  while(True):
      q=n/2
      r=n%2
      n=q
      counter = counter-1
      try:
        bitseq.append(int(r))
      except:
        bitseq = [r]
      if(counter<=0):
        break
  try:
    bitseq.reverse()
  except:
    bitseq= []
  return bitseq
def renyi_seq(x, a, b, alpha, n):
# Function Purpose:
# The renyi_seq function generates a sequence of numbers using the Rényi map. The Rényi map is a nonlinear,
# chaotic map commonly used in chaos-based cryptography. The function takes several parameters:

# x: Initial value of the sequence.
# a, b: Coefficients influencing the map.
# alpha: Scaling factor.
# n: Number of iterations to generate the sequence.
# Function Details:
# Initialization:

# arr: List to store the generated sequence.
# xn: Current value of the sequence initialized to the provided x.
# Sequence Generation:

# The function iterates n times to generate the sequence.
# In each iteration, it calculates a new value f using the Rényi map formula.
# math.tan(x) * (1 + x) * b + (1 - x) * x * a: Formula for the Rényi map.
# The result is stored in f.
# Scaling and Update:

# math.modf(f): Separates the fractional and integer parts of f.
# xn = int(xn * alpha): Scales the fractional part by alpha and converts it to an integer.
# The scaled value becomes the next value of the sequence (xn), and it is assigned to x for the next iteration.
# Sequence Storage:

# The generated value f is appended to the arr list.
# Result:

# The function returns the list arr containing the generated sequence.
# Rényi Map Formula:
# The formula used in the Rényi map is a nonlinear combination of trigonometric and polynomial terms.
# The specific choice of coefficients (a and b) and the scaling factor (alpha) contribute to the chaotic behavior
# of the map, making it suitable for cryptographic applications.

# This sequence is then used in the encryption process, likely introducing randomness and complexity to the 
# key generation or manipulation steps in the overall cryptographic algorithm. 
# The exact impact of this sequence on the encryption process depends on how it is utilized in other parts of the code.
  arr = []
  xn = x
  for i in range(n):
    f = math.tan(x)*(1+x)*b + (1-x)*x*a
    xn , temp = math.modf(f)
    xn = int(xn * alpha)
    x = xn
    try:
      arr.append(f) 
    except:
      arr = [f]
  return arr
def renyi_key_img(rs, mat):
#   Function Signature:

# def renyi_key_img(rs, mat):
# Defines a function named renyi_key_img that takes two parameters: rs (Rényi sequence) and mat (image matrix).
# Initialization:

# kmat = []: Initializes an empty list to store rows of the key matrix.
# Nested Loop Over Image Matrix:

# The function uses a nested loop to iterate over each element in the image matrix (mat).
# The outer loop (for i in range(len(mat))) iterates over rows.
# The inner loop (for j in range(len(mat[i]))) iterates over columns.
# Generate Key Matrix Elements:

# row = []: Initializes an empty list to store the elements of the current row in the key matrix.
# try...except block is used to handle exceptions.
# row.append(int(rs[x] % 256)): Adds the current element to the row by taking the remainder 
# when dividing the corresponding Rényi sequence value (rs[x]) by 256.
# This is likely done to ensure that the values are in the range [0, 255].
# except: Handles the case where an exception occurs (e.g., if the index x exceeds the length of the Rényi sequence).
# Update Index x:

# x = x + 1: Increments the index x after processing each element in the image matrix.
# Append Row to Key Matrix:

# kmat.append(row): Appends the generated row to the key matrix.
# Handle Exceptions for Key Matrix:

# except: Handles the case where an exception occurs during the row appending process. 
# It initializes kmat as a list containing the current row if an exception occurs.
# The overall function iterates over each element in the image matrix, uses the Rényi sequence to generate key matrix
# elements, and stores the resulting key matrix (kmat). The key matrix is likely used in subsequent encryption steps
# within the larger context of the code.
  kmat = []
  x = 0
  for i in range(len(mat)):
    row = []
    for j in range(len(mat[i])):
      try:
        row.append(int(rs[x]%256))
      except:
        row = [int(rs[x]%256)]
      x = x + 1
    try:
      kmat.append(row)
    except:
      kmat = [row]
  return kmat
def tent_seq(x, r, n):
  xn = x
  arr = []
  for i in range(n):
    xn = min(x, 1-x) * r
    x = xn
    try:
      arr.append(xn)
    except:
      arr = [xn]
  return arr
Rule = [
  ["A", "G", "C", "T"],
  ["A", "C", "G", "T"],
  ["G", "A", "T", "C"],
  ["C", "A", "T", "G"],
  ["G", "T", "A", "C"],
  ["C", "T", "A", "G"],
  ["T", "G", "C", "A"],
  ["T", "C", "G", "A"]
]
Rule_reverse = [
  {"A":0, "G":1, "C":2, "T":3},
  {"A":0, "C":1, "G":2, "T":3},
  {"G":0, "A":1, "T":2, "C":3},
  {"C":0, "A":1, "T":2, "G":3},
  {"G":0, "T":1, "A":2, "C":3},
  {"C":0, "T":1, "A":2, "G":3},
  {"T":0, "G":1, "C":2, "A":3},
  {"T":0, "C":1, "G":2, "A":3}
]
def dna_code_to_map(st, rule):
#   Suppose we have the following DNA sequence (st):

# python
# Copy code
# st = "AGTC"
# And let's consider a rule (Rule) defined as follows:

# python
# Copy code
# Rule = [
#     ["A", "G", "C", "T"],
#     ["A", "C", "G", "T"],
#     ["G", "A", "T", "C"],
#     ["C", "A", "T", "G"],
#     ["G", "T", "A", "C"],
#     ["C", "T", "A", "G"],
#     ["T", "G", "C", "A"],
#     ["T", "C", "G", "A"]
# ]
# Now, let's assume a rule index (rule) for this example. For simplicity, let's use rule = 1.

# The dna_code_to_map function will convert the DNA sequence "AGTC" based on the specified rule:

# python
# Copy code
# num = dna_code_to_map(st, rule)
# The process:

# For the first character 'A' in the DNA sequence:

# Rule[1][0] corresponds to 'A', so the numerical value 0 is appended to the num list.
# For the second character 'G' in the DNA sequence:

# Rule[1][1] corresponds to 'G', so the numerical value 1 is appended to the num list.
# For the third character 'T' in the DNA sequence:

# Rule[1][3] corresponds to 'T', so the numerical value 3 is appended to the num list.
# For the fourth character 'C' in the DNA sequence:

# Rule[1][2] corresponds to 'C', so the numerical value 2 is appended to the num list.
# After processing all characters in the DNA sequence, the num list will be [0, 1, 3, 2].
  num = []
  for i in range(4):
    for j in range(4):
      if(Rule[rule][j] == st[i]):
        try:
          num.append(j)
        except:
          num = [j]
  return num
def map_to_dna_code(num, rule):
#   Assuming the same Rule as in the previous example:

# python
# Copy code
# Rule = [
#     ["A", "G", "C", "T"],
#     ["A", "C", "G", "T"],
#     ["G", "A", "T", "C"],
#     ["C", "A", "T", "G"],
#     ["G", "T", "A", "C"],
#     ["C", "T", "A", "G"],
#     ["T", "G", "C", "A"],
#     ["T", "C", "G", "A"]
# ]
# Now, let's use the map_to_dna_code function:

# python
# Copy code
# result_sequence = map_to_dna_code(num, rule)
# The process:

# For the first numerical value 0:

# Rule[1][0] corresponds to 'A', so 'A' is added to the resulting DNA sequence.
# For the second numerical value 1:

# Rule[1][1] corresponds to 'G', so 'G' is added to the resulting DNA sequence.
# For the third numerical value 3:

# Rule[1][3] corresponds to 'T', so 'T' is added to the resulting DNA sequence.
# For the fourth numerical value 2:

# Rule[1][2] corresponds to 'C', so 'C' is added to the resulting DNA sequence.
# After processing all numerical values, the resulting DNA sequence will be:

# python
# Copy code
# result_sequence = "AGTC"
  st = ""
  for i in range(4):
    st = st + Rule[rule][num[i]]
  return st
def dna_oper_encode(s1, s2, oper, rule):
  n1 = dna_code_to_map(s1, rule)  
  n2 = dna_code_to_map(s2, rule)  
  n3 = []
  for i in range(4):
    if(oper == 0):
      a = (n1[i]+n2[i])%4
    elif(oper == 1):
      a = (n1[i]-n2[i])%4
    else:
      a = n1[i] ^ n2[i]
    try:
      n3.append(a)
    except:
      n3 = [a]
  s3 = map_to_dna_code(n3, rule)
  return s3
def dna_oper_decode(s1, s2, oper, rule):
  n1 = dna_code_to_map(s1, rule)  
  n2 = dna_code_to_map(s2, rule)  
  n3 = []
  for i in range(4):
    if(oper == 0):
      a = (n1[i]-n2[i])%4
    elif(oper == 1):
      a = (n1[i]+n2[i])%4
    else:
      a = n1[i] ^ n2[i]
    try:
      n3.append(a)
    except:
      n3 = [a]
  s3 = map_to_dna_code(n3, rule)
  return s3
def int_to_dna_code(l, rule):
#   Function Parameters:

# l: The integer value that needs to be converted into a DNA sequence.
# rule: The rule used to determine the mapping from binary to DNA bases. It is likely derived from the tent sequence
# or another source.
# Binary Conversion:

# The function calls another function named toBinary to convert the integer l into its binary representation. 
# The binary representation is stored in the variable a.
# DNA Mapping Loop:

# The function then enters a loop that iterates over the binary representation (a) in pairs of bits
# (2 bits at a time, starting from the least significant bits). The loop variable i increments by 2 in each iteration.
# Mapping to DNA Bases:

# For each pair of bits, the function checks the combination of bits and maps it to a corresponding DNA base. 
# The mapping is done using the Rule list, which appears to be a predefined set of DNA bases.

# If the pair is 00, it maps to Rule[rule][0].

# If the pair is 01, it maps to Rule[rule][1].

# If the pair is 10, it maps to Rule[rule][2].

# If the pair is 11, it maps to Rule[rule][3].

# Building DNA Sequence:

# The resulting DNA bases are concatenated to the string st. This process is repeated for all pairs of bits in the
# binary representation.
# Return:

# The function returns the final DNA sequence (st) representing the original integer value.
  a = toBinary(l)
  st = ""
  for i in range(0, 8, 2):
    if(a[i]==0 and a[i+1]==0):
      st = st + Rule[rule][0]
    elif(a[i]==0 and a[i+1]==1):
      st = st + Rule[rule][1]
    elif(a[i]==1 and a[i+1]==0):
      st = st + Rule[rule][2]
    else:
      st = st + Rule[rule][3]
  return st
def dna_code_to_int(s, rule):
  b = []
  for i in range(4):
    a = Rule_reverse[rule][s[i]]
    if(a == 0):
      try:
        b.append(0)
        b.append(0)
      except:
        b = [0]
        b = [0]
    elif(a==1):
      try:
        b.append(0)
        b.append(1)
      except:
        b = [0]
        b = [1]
    elif(a==2):
      try:
        b.append(1)
        b.append(0)
      except:
        b = [1]
        b = [0]
    else:
      try:
        b.append(1)
        b.append(1)
      except:
        b = [1]
        b = [1]
  a = toDecimal(b)
  return a
def encode_dna_mat(mat, tr):
#   Nested Loop:

# The function uses nested loops to iterate over each element of the input matrix mat.
# Rule Calculation:

# For each element in the matrix, a rule is calculated based on the tent sequence (tr) and the current position x. 
# The rule is calculated as int(tr[x] * x) % 8. The modulo operation ensures that the rule value is 
# within the range [0, 7].
# Element Encoding:

# The function then calls the int_to_dna_code function to encode the numerical value of the matrix element into a DNA
# sequence. The encoding is performed based on the calculated rule.
# Handling Exceptions:

# The code uses a try-except block to handle exceptions that might occur during the encoding process. If an exception
# occurs, it initializes an empty list row.
# Row and Matrix Appending:

# The encoded DNA sequence (st) is appended to the current row. The row is then appended to the matrix emat. If an 
# exception occurs during row appending, the matrix emat is initialized with a new list containing the problematic row.
# Position Update:

# The variable x is updated to track the current position in the tent sequence.
# Return:

# The function returns the encoded matrix emat.
  emat = []
  x = 0
  for i in range(len(mat)):
    row = []
    for j in range(len(mat[0])):
      rule = int(tr[x]*x)%8
      st = int_to_dna_code(mat[i][j], rule)
      try:
        row.append(st)
      except:
        row = []
      x = x + 1
    try:
      emat.append(row)
    except:
      emat = [row]
  return emat
def decode_dna_mat(mat, tr):
  emat = []
  x = 0
  for i in range(len(mat)):
    row = []
    for j in range(len(mat[0])):
      rule = int(tr[x]*x)%8
      n = dna_code_to_int(mat[i][j], rule)
      try:
        row.append(n)
      except:
        row = []
      x = x + 1
    try:
      emat.append(row)
    except:
      emat = [row]
  return emat
def dna_opers_encode(mat, mat1, ts):
#   Function Parameters:

# mat: The first matrix containing DNA sequences.
# mat1: The second matrix containing DNA sequences.
# ts: The parameter containing rules or parameters for the DNA operations.
# Initialization:

# omat: This is the output matrix that will store the result of the DNA operations.
# Loop Over Rows:

# The outer loop iterates over the rows of the input matrices (mat and mat1).
# Initialization of Row:

# row: This is a temporary list that will store the elements of the current row in the output matrix.
# Rule and Operation Determination:

# rule: Calculated based on the values of ts and x. It is used to determine how the DNA operations will be applied.
# oper: Also calculated based on the values of ts and x. It likely determines the type of DNA operation to be performed.
# Loop Over Columns:

# The inner loop iterates over the elements in the current row of the input matrices.
# DNA Operation:

# dna_oper_encode(mat[i][j], mat1[i][j], oper, rule): This function likely performs a DNA operation on the
# corresponding elements of mat and mat1 based on the determined rule and operation.
# Appending Result to Row:

# The result of the DNA operation is appended to the row list.
# Row Appended to Output Matrix:

# After processing all elements in the current row, the row list is appended to the omat matrix.
# Incrementing Counter:

# x is incremented to change the rule and operation for the next row.
  omat = []
  x = 0
  for i in range(len(mat)):
    row = []
    rule = int(ts[x]*x)%8
    oper = int(ts[x]*x)%3
    for j in range(len(mat[i])):
      val = dna_oper_encode(mat[i][j], mat1[i][j], oper, rule)
      try:
        row.append(val)
      except:
        row = [val]
    x = x + 1 
    try:
      omat.append(row)
    except:
      row = [omat]
  return omat
def dna_opers_decode(mat, mat1, ts):
  omat = []
  x = 0
  for i in range(len(mat)):
    row = []
    rule = int(ts[x]*x)%8
    oper = int(ts[x]*x)%3
    for j in range(len(mat[i])):
      val = dna_oper_decode(mat[i][j], mat1[i][j], oper, rule)
      try:
        row.append(val)
      except:
        row = [val]
    x = x + 1 
    try:
      omat.append(row)
    except:
      row = [omat]
  return omat
def get_initial_values(hash):
#   5. xor = xor ^ (ord(s[j]) * j):
# Purpose: This step performs bitwise XOR operations between the current XOR value
# and the product of the ASCII value of the character and its position in the chunk.
# Explanation: The XOR operation introduces a level of randomness and non-linearity, 
# ensuring that different characters in different positions contribute differently to the final result.
# This helps in creating a more diverse set of initial values.
# 6. _sum = _sum + ord(s[j]):
# Purpose: This step accumulates the ASCII values of the characters in the chunk.
# Explanation: The sum provides a measure of the total "weight" of the characters in the chunk.
# By summing up the ASCII values, characters with higher ASCII values contribute more to this part of the calculation.
# It adds another layer of complexity and diversity to the generated values.
# 7. val = (xor + _sum) / 8192:
# Purpose: This step combines the XOR and sum values and scales the result by dividing by 8192.
# Explanation: The combination of XOR and sum values ensures that both bitwise and additive properties are considered.
# Dividing by 8192 scales the result to a smaller range, providing a normalized and consistent output.
# The specific choice of 8192 might be arbitrary and could be related to the desired range of values.
  strings = [(hash[i:i+8]) for i in range(0, len(hash), 8)]
  values = []
  for i in range(len(strings)):
    s = strings[i]
    xor = 0
    sum = 0
    for j in range(len(s)):
      xor = xor ^ (ord(s[j]) * j)
      sum = sum + ord(s[j])
    val = (xor + sum) / 8192
    try:
      values.append(val)
    except:
      values = [val]
  values.append((values[0] + values[4] + values[7])/3)
  # print(values)
  return values
def encrypt_image(im, target_file_name, key):
  print("Encryption started.....")
  hash = hashlib.sha256(key.encode())
  # hashlib.sha256(key.encode()): Creates a SHA-256 hash object from the UTF-8 encoded version of the encryption key.
  hash = hash.hexdigest()
  # hash.hexdigest(): Converts the hash object into its hexadecimal representation.
  print(hash)
  v = get_initial_values(hash)
  # v = get_initial_values(hash): Calls the get_initial_values function to obtain a list of initial values like based on the hash.
  # The generation of initial values from the hash is a step in the encryption process that
  # involves deriving numerical values from the hash of the encryption key.
  # print("hash values",v)
  # This hash is a crucial step in creating unique and deterministic values based on the encryption key. 
  # These values likely contribute to the randomness or uniqueness of the encryption process. 
  mat = get_matrix(im, 0)
  # In image processing, images are often represented as 3D arrays, where the third dimension corresponds 
  # to the color channels. Each element in the array represents the intensity of a pixel in a specific color channel
  # (e.g., red, green, or blue). Separating color channels can be useful for various purposes, 
  # including image manipulation, analysis, and encryption.
  rs = renyi_seq(v[0], (v[2]+v[4])*10, (v[5]+v[6])*10, (v[1]+v[7])*12345, len(mat)*len(mat[0]))
# The function renyi_seq is being called with specific arguments. 
# Let's break down why these particular values are passed:

# v[0]: This is the first value from the list v obtained from the get_initial_values function. 
# The values in v are generated based on the hash of the encryption key. 
# This initial value likely serves as the starting point for the Rényi sequence.

# (v[2]+v[4])*10: This is a combination of the third and fifth values in v, multiplied by 10. 
# The specific multiplication factor and the choice of these particular values contribute 
# to the coefficients influencing the Rényi map formula. These coefficients introduce a level of variability 
# and complexity to the generated sequence.

# (v[5]+v[6])*10: Similar to the previous case, this is a combination of the sixth and seventh values in v,
# multiplied by 10. These values contribute to the coefficients in the Rényi map formula, 
# introducing additional variability.

# (v[1]+v[7])*12345: This combination involves the second and eighth values in v, multiplied by 12345.
# Again, this introduces more variability and complexity to the coefficients used in the Rényi map formula. 
# The choice of 12345 as a multiplier is arbitrary and is likely chosen for its prime factorization properties.

# len(mat)*len(mat[0]): The length of the matrix mat (presumably representing an image) is used as the n parameter 
# for the Rényi sequence function. This determines how many iterations of the Rényi map will be computed, 
# influencing the length of the generated sequence.

# In summary, the values passed to the renyi_seq function are derived from the initial values obtained based 
# on the hash of the encryption key (v), and they are used as parameters to generate a Rényi sequence.
# The Rényi sequence is likely employed in the encryption process to introduce chaos and randomness. 
# The specific values and their combinations contribute to the uniqueness and variability of the generated sequence.
  ts_r = (v[6] + 1.4)
  if(ts_r - 2 > 0):
    ts_r = ts_r - 2
  ts = tent_seq(v[3], ts_r, len(mat)*len(mat[0]))
# Calculate ts_r:

# ts_r is calculated by adding 1.4 to the seventh value (v[6]) from the initial values obtained earlier. 
# This value is used as a parameter for the subsequent tent_seq function. The addition of 1.4 introduces a
# constant factor to the calculation.
# Adjust ts_r:

# There is a conditional check: if ts_r - 2 > 0:. If the result of subtracting 2 from ts_r is greater than 0,
# then ts_r is adjusted by subtracting 2. This conditional check ensures that ts_r remains within a certain range.
# Calculate ts:

# The adjusted ts_r and the fourth value (v[3]) from the initial values are used as parameters 
# for the tent_seq function. The result, ts, is a sequence generated using the tent map.
# The length of the sequence is determined by the product of the width and height of the image matrix (len(mat)*len(mat[0])).
# Here's an overview of what the tent map and its parameters are doing in this context:

# The tent map is a chaotic map that generates a sequence of values based on an initial value and a parameter. 
# It is commonly used in chaos-based encryption algorithms.

# The parameters (v[6] + 1.4) and v[3] are used to introduce variability and randomness into the tent map. 
# The seventh initial value (v[6]) influences the starting point, and 
# the fourth initial value (v[3]) affects the behavior of the tent map.

# The adjustment of ts_r and the subsequent calculation of ts contribute to the creation of a dynamic sequence 
# that is likely used in subsequent encryption steps.

# These steps showcase the use of different chaotic maps (Rényi map and tent map) and their parameters to generate sequences
# that add randomness and complexity to the encryption process. The resulting sequences (rs and ts) are then utilized 
# in the encryption operations, which could involve further manipulation of matrices or image data.
  key_img = renyi_key_img(rs, mat)
# Function Call: renyi_key_img

# This is a function call to a function named renyi_key_img. The function likely takes two parameters: 
#   rs (the Rényi sequence) and mat (the image matrix).
# Parameters:

# rs: The Rényi sequence generated earlier using the renyi_seq function. 
# This sequence is likely used as a source of randomness for key generation.
# mat: The image matrix, which represents the pixel values of the image. 
# This matrix might be processed to derive key-related information.
# Key Matrix Generation:

# The renyi_key_img function is responsible for generating the key matrix (key_img) based on the Rényi sequence 
# and image matrix. The specifics of how the Rényi sequence influences key generation are 
# determined by the implementation of this function.
# Purpose of the Key Matrix:

# The key matrix is likely used in subsequent encryption steps. It may be combined with other matrices,
# undergo further transformations, or contribute to the generation of pseudorandom values used in the encryption process.
  encoded_key_image = encode_dna_mat(key_img, ts)
#   Function Call: encode_dna_mat

# This is a function call to a function named encode_dna_mat. The function likely takes two parameters:
#   key_img (the key matrix) and ts (tent sequence).
# Parameters:

# key_img: The key matrix generated using the Rényi sequence and the image matrix.
# ts: The tent sequence, likely used for encoding.
# Matrix Encoding:

# The encode_dna_mat function is responsible for encoding the key matrix into a DNA sequence. 
# The specifics of how the encoding is done depend on the implementation of this function.
# Encoded DNA Image:

# The result of this encoding process is stored in the variable encoded_key_image. 
# This variable likely holds a representation of the key matrix in the form of a DNA sequence.
# Purpose of DNA Encoding:

# The DNA encoding process is a common technique in cryptography or steganography. 
# It transforms numerical or binary data into a sequence of characters based on a predefined mapping. 
# This process may introduce redundancy, randomness, or specific patterns depending on the encoding algorithm used.
# Use of Tent Sequence:

# The ts (tent sequence) is used as part of the encoding process. The specifics of how the tent sequence influences 
# the encoding are determined by the implementation of the encode_dna_mat function.
# Encoded Key Image Usage:

# The encoded_key_image variable is likely used in subsequent steps of the code, possibly in combination with other 
# encoded data or as a component in the encryption process.
  encoded_img = encode_dna_mat(mat, ts)
  output_img = dna_opers_encode(encoded_img, encoded_key_image, ts)
  # print("dna out seq=",output_img[:10])
#   Function Parameters:

# encoded_img: The matrix of DNA sequences obtained by encoding the initial image matrix.
# encoded_key_image: The matrix of DNA sequences obtained by encoding the key matrix.
# ts: The parameter that likely contains rules or parameters for the DNA operations. It is used in 
# the dna_opers_encode function.
# Function Call:

# The function dna_opers_encode is called with the matrices encoded_img and encoded_key_image, as well as the
# parameter ts.
  decoded_output_img = decode_dna_mat(output_img, ts)
  # print("dna out seq 2=",decoded_output_img[:10])
  mat = get_matrix(im, 1)
  rs = renyi_seq(v[1], (v[0]+v[6])*10, (v[2]+v[4])*10, (v[3]+v[5])*12345, len(mat)*len(mat[0]))
  ts_r = (v[5] + 1.4)
  if(ts_r - 2 > 0):
    ts_r = ts_r - 2
  ts = tent_seq(v[7], ts_r, len(mat)*len(mat[0]))
  key_img = renyi_key_img(rs, mat)
  encoded_key_image = encode_dna_mat(key_img, ts)
  encoded_img = encode_dna_mat(mat, ts)
  output_img = dna_opers_encode(encoded_img, encoded_key_image, ts)
  decoded_output_img1 = decode_dna_mat(output_img, ts)
  mat = get_matrix(im, 2)
  rs = renyi_seq(v[2], (v[3]+v[5])*10, (v[1]+v[7])*10, (v[0]+v[4])*12345, len(mat)*len(mat[0]))
  ts_r = (v[4] + 1.4)
  if(ts_r - 2 > 0):
    ts_r = ts_r - 2
  ts = tent_seq(v[8], ts_r, len(mat)*len(mat[0]))
  key_img = renyi_key_img(rs, mat)
  encoded_key_image = encode_dna_mat(key_img, ts)
  encoded_img = encode_dna_mat(mat, ts)
  output_img = dna_opers_encode(encoded_img, encoded_key_image, ts)
  decoded_output_img2 = decode_dna_mat(output_img, ts)
  
  img = Image.new("RGB", (im.shape[1], im.shape[0]))
  
# The line mg = Image.new("RGB", (im.shape[1], im.shape[0])) creates a new RGB (Red, Green, Blue) image
# using the Python Imaging Library (PIL) or its successor, the Pillow library. 
# Let's break down this line:

# Image.new("RGB", (im.shape[1], im.shape[0])): This part of the code creates a new image. 
# The Image.new function is a part of the PIL or Pillow library, and it is used to create a new image 
# with a specified mode and size.

# "RGB": This specifies the mode of the image. In this case, "RGB" indicates that the image will have 
# three color channels: Red, Green, and Blue. Each channel can have values ranging from 0 to 255, 
# representing different intensities of the respective colors.

# (im.shape[1], im.shape[0]): This specifies the size of the image in pixels. im.shape[1] corresponds to the
# width of the image, and im.shape[0] corresponds to the height. The size is determined based on the 
# shape of the original image (im), where im.shape[1] is the number of columns (width), and 
# im.shape[0] is the number of rows (height).

# So, the line creates a new RGB image with dimensions matching the width and height of the original image (im).
# The newly created image is assigned to the variable mg.
  pix = img.load()
#   The line pix = img.load() is used to obtain a pixel access object for the image. In Pillow 
#   (a fork of the Python Imaging Library or PIL), the load() method is used to create a pixel access 
#   object that allows direct access to the pixel values of the image. Here's how it works:

# img: This is the image object that you have created using Image.new or loaded from a file.

# .load(): This method returns a pixel access object that you can use to read or modify individual pixel values.

# By assigning the result to the variable pix, you create a reference to this pixel access object. 
# Now, you can use pix to interact with the individual pixels of the image.
  pix = assign_matrix_image(pix, decoded_output_img, decoded_output_img1,decoded_output_img2)
  img.save(target_file_name, "BMP" )
def decrypt_image(im, target_file_name, key):
    print("Decryption started.....")
    hash = hashlib.sha256(key.encode()).hexdigest()
    # print(hash)
    v = get_initial_values(hash)
    # print(v)
    mat = get_matrix(im, 0)
    rs = renyi_seq(v[0], (v[2]+v[4])*10, (v[5]+v[6])*10, (v[1]+v[7])*12345, len(mat)*len(mat[0]))
    ts_r = (v[6] + 1.4)
    if ts_r - 2 > 0:
        ts_r = ts_r - 2
    ts = tent_seq(v[3], ts_r, len(mat)*len(mat[0]))
    key_img = renyi_key_img(rs, mat)
    encode_img = encode_dna_mat(mat, ts)
    encoded_key_image = encode_dna_mat(key_img, ts)
    output_img = dna_opers_decode(encode_img, encoded_key_image, ts)
    decoded_output_img = decode_dna_mat(output_img, ts)
    mat = get_matrix(im, 1)
    rs = renyi_seq(v[1], (v[0]+v[6])*10, (v[2]+v[4])*10, (v[3]+v[5])*12345, len(mat)*len(mat[0]))
    ts_r = (v[5] + 1.4)
    if ts_r - 2 > 0:
        ts_r = ts_r - 2
    ts = tent_seq(v[7], ts_r, len(mat)*len(mat[0]))
    key_img = renyi_key_img(rs, mat)
    encode_img = encode_dna_mat(mat, ts)
    encoded_key_image = encode_dna_mat(key_img, ts)
    output_img = dna_opers_decode(encode_img, encoded_key_image, ts)
    decoded_output_img1 = decode_dna_mat(output_img, ts)
    mat = get_matrix(im, 2)
    rs = renyi_seq(v[2], (v[3]+v[5])*10, (v[1]+v[7])*10, (v[0]+v[4])*12345, len(mat)*len(mat[0]))
    ts_r = (v[4] + 1.4)
    if ts_r - 2 > 0:
        ts_r = ts_r - 2
    ts = tent_seq(v[8], ts_r, len(mat)*len(mat[0]))
    key_img = renyi_key_img(rs, mat)
    encode_img = encode_dna_mat(mat, ts)
    encoded_key_image = encode_dna_mat(key_img, ts)
    output_img = dna_opers_decode(encode_img, encoded_key_image, ts)
    decoded_output_img2 = decode_dna_mat(output_img, ts)
    img = Image.new("RGB", (im.shape[1],im.shape[0]))
    pix = img.load()
    pix = assign_matrix_image(pix, decoded_output_img, decoded_output_img1, decoded_output_img2)
    img.save(target_file_name, "BMP")
  
#Invoke-WebRequest -Uri "http://127.0.0.1:5000/decrypt" -Method POST -Headers @{"Content-Type"="application/json"} -Body '{"encrypted_image_path": "encrypted_image.bmp", "key": "Saifuddin"}'
#Invoke-WebRequest -Uri "http://127.0.0.1:5000/encrypt" -Method POST -Headers @{"Content-Type"="application/json"} -Body '{"image_path": "download.jpg", "key": "Saifuddin"}'
